---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nats-config
data:
  nats.conf: |
    pid_file: "/var/run/nats/nats.pid"
    http: 8222

    cluster {
      port: 6222
      routes [
        nats://nats-0.nats.default.svc:6222
        nats://nats-1.nats.default.svc:6222
        nats://nats-2.nats.default.svc:6222
      ]

      cluster_advertise: $CLUSTER_ADVERTISE
      connect_retries: 30
    }

    leafnodes {
      port: 7422
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nats
  labels:
    app: nats
spec:
  selector:
    app: nats
  clusterIP: None
  ports:
    - name: client
      port: 4222
    - name: cluster
      port: 6222
    - name: monitor
      port: 8222
    - name: metrics
      port: 7777
    - name: leafnodes
      port: 7422
    - name: gateways
      port: 7522
  # type: NodePort
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nats
  labels:
    app: nats
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 3
  serviceName: "nats"
  template:
    metadata:
      labels:
        app: nats
    spec:
      # Common volumes for the containers
      volumes:
        - name: config-volume
          configMap:
            name: nats-config
        - name: pid
          emptyDir: {}
        - name: nats-filestore
          persistentVolumeClaim:
            claimName: fileserver-claim-jetstream
            readOnly: false

      # Required to be able to HUP signal and apply config reload
      # to the server without restarting the pod.
      shareProcessNamespace: true

      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
        - name: nats
          image: nats:2.6.5-alpine
          ports:
            - containerPort: 4222
              name: client
              hostPort: 4222
            - containerPort: 7422
              name: leafnodes
              hostPort: 7422
            - containerPort: 6222
              name: cluster
            - containerPort: 8222
              name: monitor
            - containerPort: 7777
              name: metrics
          command:
            - "nats-server"
            - "--jetstream"
            - "--store_dir"
            - "/nats-storage"
            - "--config"
            - "/etc/nats-config/nats.conf"
            - "--name"
            - "neone-$(POD_NAME)-server"
            - "--cluster_name"
            - "neone-nats-cluster"

          # Required to be able to define an environment variable
          # that refers to other environment variables.  This env var
          # is later used as part of the configuration file.
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CLUSTER_ADVERTISE
              value: $(POD_NAME).nats.$(POD_NAMESPACE).svc
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nats-config
            - name: pid
              mountPath: /var/run/nats
            - name: nats-filestore
              mountPath: /nats-storage

          # Liveness/Readiness probes against the monitoring
          #
          livenessProbe:
            httpGet:
              path: /
              port: 8222
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8222
            initialDelaySeconds: 10
            timeoutSeconds: 5

          # Gracefully stop NATS Server on pod deletion or image upgrade.
          #
          lifecycle:
            preStop:
              exec:
                # Using the alpine based NATS image, we add an extra sleep that is
                # the same amount as the terminationGracePeriodSeconds to allow
                # the NATS Server to gracefully terminate the client connections.
                #
                command:
                  [
                    "/bin/sh",
                    "-c",
                    "/nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60",
                  ]
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fileserver-claim-jetstream
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  volumeName: fileserver-jetstream
  resources:
    requests:
      storage: 25Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fileserver-jetstream
spec:
  capacity:
    storage: 27Gi
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  nfs:
    path: /
    server: nfs-server.default.svc.cluster.local # IP address Filestore instance
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-pv-base
  labels:
    demo: nfs-pv-base
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 30Gi
---
kind: Service
apiVersion: v1
metadata:
  name: nfs-server
spec:
  ports:
    - name: nfs
      port: 2049
    - name: mountd
      port: 20048
    - name: rpcbind
      port: 111
  selector:
    role: nfs-server
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: nfs-server
spec:
  replicas: 1
  selector:
    role: nfs-server
  template:
    metadata:
      labels:
        role: nfs-server
    spec:
      containers:
        - name: nfs-server
          image: k8s.gcr.io/volume-nfs:0.8
          ports:
            - name: nfs
              containerPort: 2049
            - name: mountd
              containerPort: 20048
            - name: rpcbind
              containerPort: 111
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /exports
              name: mypvc
      volumes:
        - name: mypvc
          persistentVolumeClaim:
            claimName: nfs-pv-base
